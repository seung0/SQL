2020-06-29

SQL 7강

#데이터 입력/수정/삭제 - INSERT, UPDATE, DELETE 문

1. 데이터 입력, 수정, 삭제

-SQL의 DML문은 SELECT, INSERT, UPDATE, DELETE, MERGE

 INSERT : 테이블에 데이터를 신규로 입력
 UPDATE : 이미 저장된 데이터를 수정
 DELETE : 저장된 데이터를 삭제
 MERGE  : 조건에 따라 INSERT와 UPDATE 수행


2. INSERT 문

-테이블에 데이터를 신규로 입력, 즉 새로운 ROW를 입력하는 문장
-기본적으로 하나의 INSERT 문장은 한 개의 ROW 입력
-INSERT 구문 종류에 따라 한 INSERT 문장으로 여러 개의 ROW를 동시에 입력 가능

구문1>
INSERT INTO 테이블명 (컬럼1, 컬럼2, ...)
VALUES (값1, 값2, ...);

-한 번 실행 시 한 개의 ROW 입력
-컬럼1, 컬럼2, ... 와 값1, 값2, ... 는 개수, 순서, 데이터형이 맞아야 함
-테이블 명 다음 (컬럼1, 컬럼2, ...) 부분은 생략 가능, 생략 시 모든 컬럼 값이 입력됨
-NOT NULL 속성인 컬럼은 반드시 입력해야함


#실습#

실습용 EMP 테이블 생성

CREATE TABLE EMP (
 emp_no VARCHAR2(30) NOT NULL,
 emp_name VARCHAR(80) NOT NULL,
 salary NUMBER NULL,
 hire_date DATE NULL
 );

 >ALTER TABLE EMP
  ADD CONSTRAINTS EMP_PK PRIMARY KEY(emp_no);

 >INSERT INTO EMP(emp_no, emp_name, salary, hire_date)
  VALUES (1, '홍길동', 1000, '2020-06-01');
 *hire_date는 date형이지만 묵시적 형변환이 적용되어 문자형 값인 '2019-01-01'이 날짜로 자동 변환됨

 >INSERT INTO EMP(emp_no, emp_name)
  VALUES(2, '김유신');
 *테이블의 일부 컬럼만 선정해 입력 가능

 >INSERT INTO EMP(emp_name, emp_no)
  VALUES('강감찬', 3);
 *테이블 생성 시 컬럼 순서대로 입력할 필요는 없음, 입력하려는 컬럼과 입력된 값의 순서만 맞추면 정상 입력됨

 >INSERT INTO EMP
  VALUES(4, '세종대왕', 1000, SYSDATE);
 *컬럼명 생략 시, VALUES절에는 테이블의 모든 컬럼에 입력될 값을 명시해야 함.
  입력 순서는 테이블 생성 시 기술한 컬럼 순서

 >INSERT INTO EMP(emp_no, salary, hire_date)
  VALUES(5, 1000, SYSDATE);
 *emp_name컬럼은 NOT NULL컬럼, 따라서 반드시 입력해야 하는데 누락해서 오류가 발생

 >INSERT INTO EMP
  VALUES(4, '신사임당', 1000, SYSDATE);
 *emp_no에 4를 입력한 row가 이미 있어서 오류 발생, 기본 키 컬럼은 중복값을 허용하지 않음

 >INSERT INTO EMP
  VALUES(5, '신사임당', 1000, TO_DATE('2020-06-29', 'YYYY-MM-DD'))
 *hire_date 입력 시, TO_DATE 함수를 사용해 정확한 날짜 형식을 주고 입력








구문2>
INSERT INTO 테이블명 (컬럼1, 컬럼2, ...)
SELECT exp1, exp2, ..
FROM ...

-한 번 실행 시 여러 개의 ROW 입력 가능 -> SELECT문이 반환하는 데이터에 따라 좌우됨
-컬럼1, 컬럼2, ...와 exp1, exp2, ...는 갯수, 순서, 데이터 형이 맞아야 함
-테이블 명 다음 (컬럼1, 컬럼2, ...) 부분은 생략 가능, 생략 시 모든 컬럼 값이 입력됨
-NOT NULL 속성인 컬럼은 반드시 입력해야함

#실습#

>INSERT INTO EMP
 SELECT emp_no + 10, emp_name, salary, hire_date
 FROM EMP;
 *기존에 입력되어 있는 5건을 select 해서 다시 입력.
  단, emp_no 기본키 컬럼 중복 값 입력 방지를 위해 기존 값에 +10해서 입력

>TRUNCATE TABLE EMP;
 INSERT INTO EMP
 SELECT employee_id, first_name||' '||last_name, salary, hire_date
 FROM EMPLOYEES
 WHERE department_id = 90;
 *employees테이블에서 부서번호가 90번인 사원의 데이터를 조회해 emp 테이블에 입력

>INSERT INTO EMP
 SELECT employee_id, first_name||' '||last_name, salary, hire_date
 FROM employees;
 *위에서 employees테이블에서 90번 부서 사원 이미 등력했기 때문에 전체 사원 입력을 시도하니 중복값 오류 발생

 실습용 EMP_INFO1 테이블 생성
>CREATE TABLE EMP_INFO1 (
   emp_no VARCHAR2(30) NOT NULL,
   emp_name VARCHAR2(80) NOT NULL,
   salary NUMBER NULL,
   hire_date DATE NULL,
   department_name VARCHAR2(80) NULL,
   country_name VARCHAR2(80) NULL
   );

>INSERT INTO EMP_INFO1
 SELECT a.employee_id,
        a.first_name||' '||a.last_name,
        a.salary,
        a.hire_date,
        b.department_name,
        d.country_name
FROM employees a, departments b, locations c, countries d
WHERE a.department_id = b.department_id
  AND b.location_id = c.location_id 
  AND c.country_id = d.country_id;
*조인을 사용한 쿼리를 사용해 그 결과를 emp_info1테이블에 입력







구문3>
INSERT ALL
 INTO 테이블명1 (컬럼1, 컬럼2, ...)
      VALUES (값1, 값2, ...)
 INTO 테이블명2 (컬럼1, 컬럼2, ...)
      VALUES (값1, 값2, ...)

 ...
SELECT exp1, exp2, ..
FROM ...

-한 번 실행 시 여러 테이블 동시에 INSERT
-컬럼과 값의 쌍 갯수, 순서, 데이터 형이 맞아야함
-입력하고자 하는 컬럼은 조정 가능
-실제 사용하는 경우 별로 없음

#실습#

>INSERT ALL 
  INTO EMP1 (emp_no, emp_name, salary, hire_date)
     VALUES (emp_no, emp_name, salary, hire_date)
  INTO EMP2 (emp_no, emp_name, salary, hire_date)
     VALUES (emp_no, emp_name, salary, hire_date)
 SELECT employee_id emp_no,
        first_name||' '||last_name emp_name,
        salary,
        hire_date
   FROM employees;

>INSERT ALL 
  INTO EMP1 (emp_no, emp_name, salary, hire_date)
     VALUES (emp_no, emp_name, salary, hire_date)
  INTO EMP2 (emp_no, emp_name, salary, hire_date)
     VALUES (emp_no, emp_name, salary, hire_date)
  INTO EMP3 (emp_no, emp_name)
     VALUES (emp_no, emp_name)
 SELECT employee_id emp_no,
        first_name||' '||last_name emp_name,
        salary,
        hire_date
   FROM employees;
*EMP3 테이블의 salary, hire_date 컬럼은 NULL로 나옴







구문4-1>
INSERT ALL
 WHEN 조건1 THEN
  INTO 테이블명1 (컬럼1, 컬럼2, ...)
       VALUES (값1, 값2, ...)
 WHEN 조건2 THEN
  INTO 테이블명2 (컬럼1, 컬럼2, ...)
       VALUES (값1, 값2, ...)
 ELSE INTO ...

 ...
SELECT exp1, exp2, ...
FROM ...

-WHEN 조건을 체크해 조건이 맞으면 INSERT
-WHEN 조건과 INTO 절을 여러 개 명시할 수 있음
-한 번 실행 시 여러 테이블 동시 INSERT 가능
-ELSE 절 추가 가능

#실습#

>INSERT ALL
  WHEN dept_id = 20 THEN
  INTO EMP1(emp_no, emp_name, salary, hire_date)
  VALUES (emp_no, emp_name, salary, hire_date)
  
  WHEN dept_id BETWEEN 30 AND 50 THEN
  INTO EMP2(emp_no, emp_name, salary, hire_date)
  VALUES(emp_no, emp_name, salary, hire_date)
  
  WHEN dept_id > 50 THEN
  INTO EMP3(emp_no, emp_name, salary, hire_date)
  VALUES(emp_no, emp_name, salary, hire_date)

SELECT employee_id emp_no,
       first_name||' '||last_name emp_name,
       salary,
       hire_date,
       department_id dept_id
FROM employees;

>INSERT ALL
  WHEN salary >= 2500 THEN
  INTO EMP1(emp_no, emp_name, salary, hire_date, dept_id)
  VALUES (emp_no, emp_name, salary, hire_date, dept_id)
  
  WHEN salary >= 5000 THEN
  INTO EMP2(emp_no, emp_name, salary, hire_date, dept_id)
  VALUES(emp_no, emp_name, salary, hire_date, dept_id)
  
  WHEN salary >= 7000 THEN
  INTO EMP3(emp_no, emp_name, salary, hire_date, dept_id)
  VALUES(emp_no, emp_name, salary, hire_date, dept_id)

SELECT employee_id emp_no,
       first_name||' '||last_name emp_name,
       salary,
       hire_date,
       department_id dept_id
FROM employees;

구문4-2>
INSERT FIRST
 WHEN 조건1 THEN
  INTO 테이블명1 (컬럼1, 컬럼2, ...)
       VALUES (값1, 값2, ...)
 WHEN 조건2 THEN
  INTO 테이블명2 (컬럼1, 컬럼2, ...)
       VALUES (값1, 값2, ...)
 ELSE INTO ...

 ...
SELECT exp1, exp2, ...
FROM ...

-ALL 대신 FIRST 사용
-각 ROW 데이터 기준으로 첫 번째 WHEN 조건을 만족하면 이후 INTO 절 수행
-첫 번째 조건을 만족한 데이터(ROW)가 두 번째 조건을 만족하더라도 두 번째 테이블에는 INSERT되지 않음,
 이후 조건도 동일하게 처리됨
-CASE 표현식과 동작 방식 흡사


#실습#

>INSERT FIRST
  WHEN salary >= 2500 THEN
  INTO EMP1(emp_no, emp_name, salary, hire_date, dept_id)
  VALUES (emp_no, emp_name, salary, hire_date, dept_id)
  
  WHEN salary >= 5000 THEN
  INTO EMP2(emp_no, emp_name, salary, hire_date, dept_id)
  VALUES(emp_no, emp_name, salary, hire_date, dept_id)
  
  WHEN salary >= 7000 THEN
  INTO EMP3(emp_no, emp_name, salary, hire_date, dept_id)
  VALUES(emp_no, emp_name, salary, hire_date, dept_id)

SELECT employee_id emp_no,
       first_name||' '||last_name emp_name,
       salary,
       hire_date,
       department_id dept_id
FROM employees;

*첫 번째 조건을 만났을 때 만족하면 더 이상 다음 조건을 맞춰보지 않음













3. UPDATE문

-테이블에 저장된 데이터를 수정하는 문장
-컬럼 값을 수정, 조건에 따라 여러 개의 ROW 처리 가능
-한 번 실행으로 여러 개의 컬럼 값, 여러 개의 ROW 처리 가능
-어떤 ROW를 수정할 것인지는 WHERE 절에서 처리

구문>
UPDATE 테이블명
 SET 컬럼1 = 변경값1,
     컬럼2 = 변경값2,
     ...
WHERE 조건

-변경하려는 컬럼과 변경값은 데이터 형이 맞아야함
-변경값 항목에는 표현식, 서브쿼리도 사용 가능
-WHERE 조건을 만족하는 ROW만 처리됨, WHERE절 생략 시 전체 ROW에 대해 컬럼 값 변경

#실습#

>SELECT *
 FROM EMP;

 UPDATE EMP
 SET salary = 0
 WHERE salary < 20000;
*salary가 20000 초과인 사원들의 salary를 0으로 기입

>ALTER TABLE EMP
 ADD retire_date DATE;

 UPDATE EMP
 SET retire_date = SYSDATE
 WHERE emp_no = 102;


>UPDATE EMP_INFO1
 SET emp_name = emp_name||'(middle)'
 WHERE salary BETWEEN 10000 AND 20000;

 SELECT *
 FROM EMP_INFO1
 WHERE INSTR(emp_name, 'middle') > 0;

--update확인--
 SELECT *
 FROM EMP_INFO1
 WHERE INSTR(emp_name, 'middle') > 0
 AND salary NOT BETWEEN 10000 AND 20000;
 *아무런 데이터가 나오지 않으면 성공

>UPDATE EMP_INFO1
 SET emp_name = emp_name||'(1)',
     department_name = department_name||'(1)'
 WHERE hire_date < TO_DATE('2005-01-01', 'YYYY-MM-DD');

 SELECT *
 FFROM EMP_INFO1
 WHERE INSTR(department_name, '(1)') > 0;


>SELECT *
 FROM EMP1
 WHERE dept_id is NULL;
 *Kimberely Grant!!

 UPDATE EMP1
 SET dept_id = (SELECT MAX(department_id)
                FROM departments
                WHERE manager_id IS NULL)
 WHERE dept_id IS NULL;









4. DELETE문

-테이블에 저장된 데이터를 삭제하는 문장
-ROW 단위로 삭제됨
-WHERE절 조건에 맞는 ROW가 삭제됨
-WHERE절 생략 시 테이블에 있는 모든 ROW가 삭제

구문>
DELETE 테이블명
WHERE 조건

-WHERE 조건을 만족하는 ROW에 한해 삭제됨
-WHERE 조건 생략 시 테이블의 전체 ROW 삭제

#실습#

>SELECT *
 FROM EMP;

 DELETE EMP
 WHERE emp_no in (101, 102);

>DELECT EMP1
 WHERE emp_name LIKE 'J%';
 *emp_name이 J로 시작하는 row를 삭제






5. SQL Developer에서 파일 Import

-SQL Developer를 이용해 csv, excel 파일을 읽어 테이블에 데이터 저장

-titanic_data.csv 파일 다운로드
-SQL Developer 실행 
-왼쪽 접속 창에서 테이블 -> 오른쪽 마우스 -> 데이터 임포트(A) 선택
-데이터 임포트 마법사 창 -> 파일 선택 -> 다음 버튼
-데이터 임포트 마법사 창 -> 테이블 이름 : titanic 입력 -> 다음 버튼 -> 완료
-데이터 확인 
 SELECT *
 FROM titanic;







#트랜잭션 처리, Merge문, 뷰, 데이터 딕셔너리

1. 트랜잭션(Transaction) 처리

-'거래'라는 뜻
-SQL에서는 COMMIT, ROLLBACK 문장으로 트랜잭션 처리
-거래 성공 -> COMMIT : 변경된 데이터 최종 저장
 거래 실패 -> ROLLBACK : 변경 이전 상태로 회귀
-INSERT, UPDATE, DELETE, MERGE 문 실행 후 오류 없을 경우 반드시 COMMIT문 실행
-데이터 가공 작업 실패나 기타 사유로 인해 작업 전 상태로 가고 싶다면 ROLLBACK 문 실행


#실습#

>테이블 복제
 CREATE TABLE emp_tran AS
 SELECT *
 FROM emp1;

*emp_tran 테이블 생성 + emp1 테이블 복사

 DELETE emp_tran
 WHERE dept_id = 90;

 COMMIT;
*dept_id가 90인 row가 사라짐

>UPDATE emp_tran
 SET emp_name = 'HAHA'
 WHERE dept_id = 60;

 ROLLBACK;
*다시 원상태로 복구됨





2. MERGE 문

-INSERT와 UPDATE를 한 번에 처리
-대상 테이블에 대해 조건에 따라 INSERT나 UPDATE를 수행
-일반적으로 테이블의 주요 키 값을 체크, 해당 값이 존재하면 UPDATE,
 존재하지 않으면 INSERT 수행

구문>
MERGE INTO 대상테이블명
USING 참조테이블 or 서브쿼리
ON 조인조건
WHEN MATCHED THEN
 UPDATE SET 컬럼1 = 값1, 컬럼2 = 값2, ...
WHEN NOT MATCHED THEN
INSERT(컬럼1, 컬럼2, ...)
VALUES(값1, 값2, ...);

#실습#

>테이블 복제
 CREATE TABLE dept_mgr AS
 SELECT * 
 FROM departments;

 ALTER TABLE dept_mgr
 ADD CONSTRAINTS dept_mgr_pk PRIMARY KEY(department_id);

>MERGE INTO dept_mgr a
 USING (SELECT 280 dept_id, 
               '영업부(Merge)' dept_name
        FROM DUAL
        UNION ALL
        SELECT 285 dept_id,
               '경리부(Merge)' dept_name
        FROM DUAL) b
 ON (a.department_id = b.dept_id)
 
 WHEN MATCHED THEN
 UPDATE SET a.department_name = b.dept_name

 WHEN NOT MATCHED THEN
 INSERT (a.department_id, a.department_name)
 VALUES (b.dept_id, b.dept_name);






3. 뷰(View)

-하나 혹은 그 이상의 다른 테이블이나 뷰로 구성된 논리적 객체(테이블처럼 동작)
-뷰 자체에는 데이터가 저장되어 있지 않음
-하나의 뷰가 또 다른 뷰에서 사용될 수 있음
-뷰의 용도
 >테이블 데이터 보안 강화 -> 컬럼이나 ROW 접근 제한
 >데이터 복잡성 숨김 -> 복잡하게 얽힌 쿼리를 뷰로 만들어 사용
 >테이블 구조 변경에 따른 영향동 감소 -> 신규 컬럼 추가 시에도 영향 받지 않음

 뷰 생성 
 >CREATE OR REPLACE VIEW 뷰이름 AS
  SELECT문;

 뷰 수정
 >CREATE OR REPLACE VIEW 뷰이름 AS
  SELECT문;

 뷰 삭제
 >DROP VIEW 뷰이름;


#실습#

>CREATE OR REPLACE VIEW emp_dept_v AS
 SELECT a.employee_id,
        a.first_name||' '||a.last_name emp_names,
        b.department_id,
        b.department_name
FROM employees a,
     departments b
WHERE a.department_id = b.department_id
ORDER BY 1;
*View emp_dept_v 생성


-시나리오 : HR2 사용자 생성 (ORAUSER로 로그인)
          >CREATE USER hr2 IDENTIFIED BY hr2;

          HR2에 접속 권한 설정
          >GRANT CREATE SESSION TO hr2;

          SQL Developer에서 hr2 사용자 접속 생성

          **HR2사용자가 HR스키마에 있는 사원과 부서 정보를 보고싶다고 요청
            하지만 사원의 급여는 개인정보이므로 HR 이외의 사용자에게는 공개하지 못함
            이런 경우, 사원, 부서 정보를 HR2에 공개하기 위해서는 employees, departments 테이블 조회 권한 부여하면 된다.
            하지만 급여(salary)만 비공개로 하기는 불가능
            따라서 사원과 부서 기본 정보만 조회하는 뷰를 만들고, 이 뷰의 조회 권한을 hr2에게 부여하면 된다.

>>CREATE OR REPLACE VIEW emp_dept_v2 AS
 SELECT a.employee_id,
        a.first_name||' '||a.last_name emp_names,
        b.department_id,
        b.department_name
FROM employees a,
     departments b
WHERE a.department_id = b.department_id
ORDER BY 1;

*hr사용자는 emp_dept_v2 뷰의 조회권한을 hr2에게 부여
>GRANT SELECT ON emp_dept_v2 TO hr2;

 hr사용자로 로그인 한 후, emp_dept_v2 조회
>SELECT *
 FROM emp_dept_v2;

 *hr이 생성한 emp_dept_v2 뷰를 hr이 아닌 다른 사용자가 참조하려면 소유자명, 객체명으로 접근해야한다.
  따라서 
>SELECT *
 FROM hr.emp_dept_v2;

*이 테이블 말고 hr의 다른 테이블 조회 불가







4. 데이터 딕셔너리(Data Dictionary)

-오라클에서 제공하는 데이터베이스 객체(사용자, 테이블, 뷰 등)에 대한 메타정도를 담은 뷰
-접두어로 용도 구분
 >DBA  : 데이터베이스 관리자의 뷰(모든 사용자 스키마가 포함됨)
  ALL  : 현재 로그인함 사용자가 접근할 수 있는 뷰
  USER : 현재 로그인한 사용자가 소유자인 데이터베이스 객체

-주요 사용자 객체 정보 뷰

>USER_OBJECTS     : 모든 객체 정보
 USER_TABLES      : 테이블 정도
 USER_INDEXES     : 인덱스 정보
 USER_CONSTRAINTS : 제약조건
 USER_TAB_COLS    : 테이블과 해당 컬럼 정보
 USER_VIEWS       : 뷰 정보



#실습#

>SELECT *
FROM USER_OBJECTS;



















