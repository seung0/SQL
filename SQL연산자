2020-06-11

SQL 2강

#SQL 연산자란?
-개별 데이터를 대상으로 특정 연산을 수행 후 결과를 반화
-수학에서 사용하는 +, - 등이 대표적인 연산자
-오라클에서는 다양한 기능의 연산자 제공
-연산자별 우선 순위 존재(양수, 음수 > 곱하기, 나누기 > 더하기, 빼기 > 문자열 결합 연산자)

#더하기, 빼기

SELECT 1+1, 1-1
FROM DUAL;

SELECT 1+1 plus_test, 1-1 minus_test
FROM DUAL;
---> 각각 1+1과 1-1 뒤에 명시된 것이 표의 컬럼 제목으로 설정된다.

#곱하기, 나누기

SELECT 1+1*3 multiply, 7-4/2 divide
FROM DUAL;

*괄호 사용해서 우선 순위 변경 가능

SELECT (1+1)*3 multiply, (7-4)/2 divide
FROM DUAL;

#문자열 결합

SELECT 'A'||'B', 'C'||'D'||'E'
FROM DUAL;

SELECT first_name||' '||last_name
FROM EMPLOYEES;

#비교연산자
=, !=, >, <, <=, >=, BETWEEN...AND, AND, OR, NOT(잘 안씀)

SELECT *
FROM EMPLOYEES
WHERE SALARY BETWEEN 3000 AND 5000  ----> 3000과 5000도 포함됨
ORDER BY SALARY;

#NULL 연산자 
IS NULL, IS NOT NULL

column1의 값이 NULL인지 체크
-column1 IS NULL (O)
-column1 = NULL (X)

*NULL은 공백이 아님
*오라클에서는 NULL과 empty string('')을 동일시함

#LIKE 연산자

LIKE : 문자열 비교
-last_name like 'da%'  (da로 시작하는 모든 문자)
-last_name like '%d'   (d로 끝나는 모든 문자)
-'%'는 모든 문자를 의미

SELECT *
FROM EMPLOYEES 
WHERE phone_number LIKE '011%';

SELECT *
FROM EMPLOYEES
WHERE phone_number LIKE '%9';

SELECT *
FROM EMPLOYEES
WHERE phone_number LIKE '%124%';


#IN 연산자
 
IN : 컬럼 IN (값1, 값2, 값3, ...) --> OR과 동일한 동작

SELECT *
FROM EMPLOYEES
WHERE JOB_ID IN ('IT_PROG', 'AD_VP', 'FI_ACCOUNT');

SELECT *
FROM EMPLOYEES
WHERE JOB_ID NOT IN ('IT_PROG', 'AD_VP', 'FI_ACCOUNT');


#SQL 표현식 (expression)
-1개 이상의 값, 연산자, 컬럼, SQL함수가 결합된 식
-1+1, 2*2, 컬럼1||컬럼2 등이 하나의 표현식
-SELECT, WHERE, ORDER BY절 등에서 사용됨

##CASE 표현식
-IF~THEN~ELSE 로직을 구현한 표현식
-여러 조건을 체크해 조건별 값을 반환하는 표현식
-단순형과 검색형이 있음

-반환하는 값의 데이터 유형이 모두 같아야 함
-ELSE는 생략이 가능
-비교 데이터 기준 특정 WHEN절 조건이 참이면 이후 조건은 체크하지 않음


1)단순형 CASE 표현식

CASE expr WHEN 비교표현식1 THEN 값1
          WHEN 비교표현식2 THEN 값2
          ...
          ELSE 값n
END

--> expr이 비교표현식1과 같으면 값1, 비교표현식2와 같으면 값2를 반환
--> 어느 비교표현식과도 같지 않으면 ELSE 다음의 값n을 반환

SELECT country_id, country_name,
       CASE region_id WHEN 1 THEN '유럽'
                      WHEN 2 THEN '아메리카'
                      WHEN 3 THEN '아시아'
                      WHEN 4 THEN '중동 및 아프리카'
       END AS region_name
FROM COUNTRIES;



2)검색형 CASE 표현식

CASE WHEN 조건1 THEN 값1
     WHEN 조건2 THEN 값2
     ...
     ELSE 값n
END

--> 조건1을 만족하면 값1, 조건2를 만족하면 값2를 반환
--> 어느 조건도 만족하지 않으면 ELSE 다음의 값n을 반환
**단순형에 비해 다양한 조건 검색이 가능해 그 활용범위가 넓음


SELECT employee_id, first_name, last_name, salary, job_id,
       CASE WHEN salary BETWEEN 1     AND 5000 THEN '낮음'
            WHEN salary BETWEEN 50001 AND 10000 THEN '중간'
            WHEN salary BETWEEN 10001 AND 15000 THEN '높은'
            ELSE '최상위'
END salary_rank
FROM EMPLOYEES;


**단순형은 CASE 뒤에 오는 expr이 존재하고, END AS 컬럼 이름 지정할 수 있는 반면
  검색형은 CASE WHEN, END 컬럼 이름 지정할 수 있음


#의사컬럼(pseudocolumn)
-테이블에 있는 컬럼처럼 동작하지만 실제 컬럼은 아닌 가상 컬럼
-ROWNUM 의사컬럼 : 쿼리 수행 후 조회된 각 로우에 대해 ROWNUM 의사컬럼은 그 순서를 가리키는 수를 반환
               : 첫 번째 선택된 로우는 1, 두 번째는 2, ... 순으로 증가됨
               : 주로 where 절에서 쿼리 결과로 반환되는 로우 수를 제어할 때 사용
-이 외에도 계층형 쿼리, 시퀀스, XML 관련 의사컬럼이 있음


#ROWNUM 의사컬럼

SELECT employee_id, first_name, last_name, rownum
FROM EMPLOYEES
WHERE rownum <= 5;


































