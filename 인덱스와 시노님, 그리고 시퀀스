2020-07-02

SQL 8강

#인덱스(Index)

-테이블에 데이터가 계속 쌓이다 보면 테이블에서 특정 데이터 조회 작업이 느려진다. 
 테이블 로우 수 증가에 따라 특정 데이터를 검색, 추출이 오래 걸리는 것을 좀 더 빠르게 데이터를 조회, 검색하기 위해 도입된 개념이다.

-테이블에 있는 특정 데이터를 빠르게 조회하는데 사용되는 데이터베이스 객체
 (테이블을 책이라고 하면 인덱스는 '찾아보기')

-찾아보기를 통해 특정 키워드를 찾는게 훨씬 빠름

-인덱스에는 인덱스 컬럼 값이 있는 테이블 로우의 주소 정보(rowid)가 있음
 (특정 로우를 빠르게 찾을 수 있음)
-인덱스 값은 정렬되어 들어가 있어 검색이 빠름


*테이블에 있는 데이터를 찾는 작업 : 스캔(scan)
 
 테이블 전체에서 데이터를 찾는 작업 : Full(테이블) 스캔

 인덱스를 통해 데이터를 찾는 작업 : 인덱스 스캔

 대부분의 경우, 인덱스 스캔이 full 스캔보다 빠름


-자주 사용되는 쿼리 분석 -> 가장 많이, 자주 사용되는 where조건 컬럼을 인덱스로 생성

-한 개 혹은 두 개 이상의 컬럼(결합 인덱스)으로 인덱스 생성 가능 -> 한 인덱스에 최대 32개 컬럼

-일반적으로 테이블 전체 row 수의 15% 이하 데이터 조회 시 인덱스 사용

-인덱스 종류 : B-Tree 인덱스 / 비트맵 인덱스 / 파티션 인덱스 / 함수 기반 인덱스 / 도메인 인덱스

-일반적으로 인덱스라고 하면 B(balanced)-Tree 인덱스를 뜻함


#인덱스 생성
 
 >CREATE [UNIQUE] INDEX 인덱스명 ON 테이블명 (컬럼1, 컬럼2, ...);

*테이블에 주요 키(PK)를 생성하면 자동으로 유일 인덱스까지 생성됨

#인덱스 삭제 

 >DROP INDEX 인덱스명;

#인덱스 사용
 WHERE절에서 인덱스 컬럼을 조회 조건으로 사용


**인덱스가 있어도 인덱스를 사용하지 못하는 경우!!
 -WHERE절에서 인덱스 컬럼을 가공하면 사용 못 함
  ex. SUBSTR(), TO_CHAR(), 이름||직급...



#효율적인 SQL문 작성을 위한 팁

-효율적인 SQL문이란? : 실행 속도가 빠른 쿼리!

-시간이 지날수록 데이터 양이 증가되어 쿼리가 느려짐
-데이터가 많은 테이블과 조인 시에도 쿼리는 느려짐



느린 쿼리를 빠르게 만드는 작업 -> SQL튜닝(tuning)                                   - SQL튜닝은 전문적인 튜너가 수행
                        -> 꼭 필요한 데이터만 처리하자                            - SELECT *보다는 사용할 컬럼 일일이 명시 + 불필요한 조인 제거
                        -> 전체 테이블 데이터 양 중 15%이하를 조회할 경우는 인덱스 활용  
                        -> 테이블 통계 정보 갱신                                - 통계 정보랑 해당 테이블에 있는 데이터의 메타 정보(전체 로우 수, 
                                                                             컬럼 당 distinct 값 등)
                                                                             통계 정보가 최신 상태여야 오라클 엔진이 정확한 쿼리 작성 계획을 세운다. (데이터베이스 관리자에게 갱신 요청)



#시노님(Synonym)

-테이블, 뷰 등 데이터베이스 객체에 대한 대체 이름, 동의어 역할을 하는 데이터베이스 객체
-다른 사용자에게 자신의 객체에 대한 권한 부여 시, 소유자명 없이 사용 가능

-PRIVATE SYNONYM : 자신만 사용 가능 
-PUBLIC SYNONYM  : 모든 사용자가 볼 수 있음

#시노님 생성/수정 구문

>CREATE OR REPLACE [PUBLIC] SYNONYM 시노님명 OWNER.참조객체;


#시노님 삭제 구문

>DROP [PUBLIC] SYNONYM 시노님명;


#시노님 생성 필요 조건
-CREATE SYNONYM 권한 : PRIVATE 시노님 생성 권한
-CREATE ANY SYNONYM 권한 : 다른 사용자 스키마 상에서 PRIVATE 시노님 생성 권한
-CREATE PUBLIC SYNONYM 권한 : PUBLIC 시노님 생성 권한


#시퀀스(Sequence)

-유일한 순번(정수형)을 생성하는 데이터베이스 객체
-주로 테이블의 기본 키(NUMBER)형 컬럼에 값을 입력 시 사용
 (employees 테이블의 employee_id, departments 테이블의 department_id)

-시퀀스 생성 필요조건
 (CREATE SEQUENCE 권한 필요)


*시퀀스 생성 구문

>CREATE SEQUENCE 시퀀스명
 INCREMENTT BY 증감숫자
 START WITH 시작숫자
 NOMINVALUE | MINVALUE 최솟값
 NOMAXVALUE | MAXVALUE 최댓값
 NOCYCLE | CYCLE
 NOCACHE | CACHE;


 INCREMENT BY : 양수, 음수도 가능(0은 안됨), 디폴트 1
 START WITH : 시작숫자
 MINVALUE : 최솟값, 디폴트 1
 MAXVALUE : 최댓값, 디폴트 99999999999
 CYCLE : 최댓값 도달 시 다시 처음부터 시작, NOCYCLE이 디폴트
 CACHE : 좀 더 빠른 처리를 위해 메모리에 미리 할당해 보관하는 시퀀스 값. 디폴트는 20
 -> 메모리 상주 값이므로 메모리 오류 발생 시, 시퀀스 값이 연속해 이어지지 않는 경우가 많음


#시퀀스 수정
>ALTER SEQUENCE 시퀀스명


#시퀀스 삭제
>DROP SEQUENCE 시퀀스명;


#시퀀스 참조 (의사컬럼)
-시퀀스명.NEXTVAL : 다음 순번을 가져옴
-시퀀스명.CURRVAL : 현재 순번을 가져옴
-반드시 NEXTVAL을 사용한 다음에야 CURRVAL을 조회가 가능함






































